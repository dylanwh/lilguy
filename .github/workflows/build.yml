
name: Build Packages

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/build.yml"
      - "Cargo.lock"
      - "Cargo.toml"
      - "build.rs"
      - "files/**"
      - "macos/**"
      - "src/**"
      - "vendor/**"
      - "wix/**"

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  cargo_version:
    runs-on: ubuntu-latest
    outputs:
      needs_release: ${{ steps.check_tag.outputs.needs_release }}
      version: ${{ steps.package_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2 
        with:
          shared-key: lilguy
      
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.7

      - run: cargo install cargo-get

      - id: package_version
        run: echo "version=$(cargo get package.version)" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.package_version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "needs_release=false" >> $GITHUB_OUTPUT
          else
            echo "needs_release=true" >> $GITHUB_OUTPUT
          fi

  unix:
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runs_on }}
    needs: cargo_version
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-x86_64
            runs_on: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - name: linux-aarch64
            runs_on: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - name: freebsd-x86_64
            runs_on: ubuntu-latest
            target: x86_64-unknown-freebsd
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: Swatinem/rust-cache@v2 
        with:
          shared-key: lilguy
      - name: build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      - name: put binary in archive
        env:
          VERSION: ${{ needs.cargo_version.outputs.version }}
          TARGET: ${{ matrix.platform.target }}
          PLATFORM: ${{ matrix.platform.name }}
        run: |
          tar --zstd \
            --transform "s,^target/$TARGET/release,lilguy-$VERSION-$PLATFORM," \
            -cf lilguy-$VERSION-$PLATFORM.tar.zst \
            target/$TARGET/release/lilguy
      - name: upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: lilguy*.tar.zst
  windows:
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    runs-on: windows-latest
    needs: cargo_version
    if: ${{ needs.cargo_version.outputs.needs_release == 'true' }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - uses: Swatinem/rust-cache@v2 
        with:
          shared-key: lilguy
      - name: install cargo wix
        run: cargo install cargo-wix
      - name: build msi package
        run: cargo wix --nocapture
      - name: move msi to top dir
        run: mv target/wix/lilguy*.msi .
      - name: upload windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: lilguy*.msi

  macos:
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    runs-on: macos-latest
    needs: cargo_version
    if: ${{ needs.cargo_version.outputs.needs_release == 'true' }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - uses: Swatinem/rust-cache@v2 
        with:
          shared-key: lilguy
      - name: install apple certificates
        env:
          APPLE_DEVELOPER_NAME: ${{ secrets.APPLE_DEVELOPER_NAME }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          BUILD_APPLICATION_CERT_BASE64: ${{ secrets.BUILD_APPLICATION_CERT_BASE64 }}
          BUILD_INSTALLER_CERT_BASE64: ${{ secrets.BUILD_INSTALLER_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          VERSION: ${{ needs.cargo_version.outputs.version }}
        run: |
          # create variables
          BUILD_APPLICATION_CERT_PATH=$RUNNER_TEMP/build_application_certificate.p12
          BUILD_INSTALLER_CERT_PATH=$RUNNER_TEMP/build_installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_APPLICATION_CERT_BASE64" | base64 --decode -o $BUILD_APPLICATION_CERT_PATH
          echo -n "$BUILD_INSTALLER_CERT_BASE64" | base64 --decode -o $BUILD_INSTALLER_CERT_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $BUILD_APPLICATION_CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $BUILD_INSTALLER_CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          ./macos/build.sh
      - name: upload the artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: lilguy*.pkg
  publish:
    runs-on: ubuntu-latest
    needs: [ cargo_version, windows, macos, unix ]
    if: ${{ needs.cargo_version.outputs.needs_release == 'true' }}
    env:
      VERSION: ${{ needs.cargo_version.outputs.version }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: download all artifacts
        uses: actions/download-artifact@v4
      - name: create github release (draft)
        run: |
          mv */*.tar.zst */*.msi */*.pkg .
          gh release create $VERSION \
            -t "Release $VERSION" \
            -n "Release $VERSION" \
            --generate-notes \
            --draft
          gh release upload $VERSION lilguy*.msi lilguy*.pkg lilguy*.tar.zst
      - name: tag release
        run: |
            git tag "v$VERSION"
            git push origin "v$VERSION"
        continue-on-error: true
      - name: publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
        continue-on-error: true